---
import BaseLayout from "../../../layouts/BaseLayout.astro";
import ProductDetailPage from "../../../react-pages/store/example-2/products/[slug]";
import { loadProductServiceConfig } from "../../../headless/store/services/product-service";
import { loadCurrentCartServiceConfig } from "../../../headless/ecom/services/current-cart-service";
import { loadProductMediaGalleryServiceConfig } from "../../../headless/store/services/product-media-gallery-service";
import { loadSelectedVariantServiceConfig } from "../../../headless/store/services/selected-variant-service";
import { loadSocialSharingServiceConfig } from "../../../headless/store/services/social-sharing-service";
import { loadRelatedProductsServiceConfig } from "../../../headless/store/services/related-products-service";
import { loadSEOTagsServiceConfig } from "../../../headless/seo/services/seo-tags-service";
import { SEO } from "../../../headless/seo/components";
import { seoTags } from "@wix/seo";

const { slug } = Astro.params;

if (!slug) {
  return Astro.redirect("/store/example-2");
}

// Load service configurations using the standard headless services
const productServiceConfigResult = await loadProductServiceConfig(slug);

if (productServiceConfigResult.type === "notFound") {
  return Astro.redirect("/404");
}

const productServiceConfig = productServiceConfigResult.config;

const currentCartServiceConfig = await loadCurrentCartServiceConfig();
const productMediaGalleryServiceConfig =
  await loadProductMediaGalleryServiceConfig(slug);
const selectedVariantServiceConfig =
  await loadSelectedVariantServiceConfig(slug);

const productName = productServiceConfig!.product!.name || "Product";
const productDescription =
  productServiceConfig!.product!.plainDescription || "An amazing product";
const productUrl = `${Astro.url.origin}/store/example-2/${slug}`;

// Load social sharing service configuration
const socialSharingServiceConfig = await loadSocialSharingServiceConfig(
  productName,
  productUrl,
  productDescription
);

// Load related products service configuration
const relatedProductsServiceConfig = await loadRelatedProductsServiceConfig(
  productServiceConfig!.product!._id || "",
  4 // limit to 4 related products
);

const seoTagsServiceConfig = await loadSEOTagsServiceConfig({
  pageUrl: Astro.url.href,
  itemType: seoTags.ItemType.STORES_PRODUCT,
  itemData: { slug },
});
---

<BaseLayout>
  <SEO.Tags seoTagsServiceConfig={seoTagsServiceConfig} slot="seo-tags" />
  <ProductDetailPage
    client:load
    productServiceConfig={productServiceConfig}
    currentCartServiceConfig={currentCartServiceConfig}
    productMediaGalleryServiceConfig={productMediaGalleryServiceConfig}
    selectedVariantServiceConfig={selectedVariantServiceConfig}
    socialSharingServiceConfig={socialSharingServiceConfig}
    relatedProductsServiceConfig={relatedProductsServiceConfig}
    slot="body"
  />
</BaseLayout>
